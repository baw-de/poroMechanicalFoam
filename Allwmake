#!/bin/bash
cd ${0%/*} || exit 1    # run from this directory

# Stop at first error
set -e

# Check if OpenFOAM/FOAM has been sourced
if [[ -z "${WM_PROJECT}" ]]
then
    echo "Please source the OpenFOAM/FOAM bashrc first!"
    exit 1
else
    allowed_ver=("4.1" "9" "v2012" "v2106" "v2112" "v2206" "v2212" "v2306" "v2312")
    if ! [[ " ${allowed_ver[*]} " == *" $WM_PROJECT_VERSION "* ]]; then
        echo "Unsupported OpenFOAM version sourced!"
    fi
fi

# Parse arguments for library compilation
if [ -f "$WM_PROJECT"/wmake/scripts/AllwmakeParseArguments ]
then  . "$WM_PROJECT"/wmake/scripts/AllwmakeParseArguments
fi

# Check to see if Umats should be compiled
if [[ ! -z "${S4F_USE_GFORTRAN+x}" ]]
then
    (cd abaqusUMATs && ./Allwmake $* 2>&1 | tee log.Allwmake)
else
    echo; echo "The S4F_USE_GFORTRAN variable is not set: skipping abaqusUMATs"
    echo "To use abaqusUMATs, install gfortran and set the S4F_USE_GFORTRAN "
    echo "variable to 1"; echo
fi

# Compile poroHydraulicModel
(cd materialModels/poroHydraulicModel/ && wmake libso $* 2>&1 | tee log.Allwmake)

# Compile poroMechanicalFoam Library
(wmake libso $* 2>&1 | tee log.Allwmake)


# Compile poroMechanicalFoam application
(cd solvers && ./Allwmake $* 2>&1 | tee log.Allwmake)

##(cd abaqusUMATs && ./Allwmake)

# Check if the build succeeded
echo "Checking if the installation was a success:"
N_ERRORS_1=$(find . -name log.Allwmake | xargs grep "\ Error\ " | wc -l)
N_ERRORS_2=$(find . -name log.Allwmake | xargs grep "\ Stop." | wc -l)
if [[ $N_ERRORS_1 -gt 0 ]] || [[ $N_ERRORS_2 -gt 0 ]]
then
    echo "** BUILD ERROR **"
    echo "There were build errors in the following logs:"
    echo $(find . -name log.Allwmake | xargs grep -l "\ Error\ ")
    echo $(find . -name log.Allwmake | xargs grep -l "\ Stop.")
    echo; echo "Please examine these logs for additional details"; echo
    exit 1
else
    echo "There were no build errors: enjoy poroMechanicalFoam!"; echo
fi
echo